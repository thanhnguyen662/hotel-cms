// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  hashPassword String
  roleId       Int?
  isDelete     Boolean? @default(false)
  role         Role?    @relation(fields: [roleId], references: [id])
  profile      Profile?
  event        Event[] 
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstName String?
  lastName  String?
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Role {
  id            Int            @id @default(autoincrement())
  name          String?
  users         User[]
  statusOfRooms StatusOfRoom[]
}

model Room {
  id              Int            @id @default(autoincrement())
  name            String?
  number          Int?
  floor           Int?
  roomDetail      RoomDetail?
  updateStatusdAt DateTime?
  statusOfRooms   StatusOfRoom[]
}

model RoomDetail {
  id      Int      @id @default(autoincrement())
  img     String[]
  price   Int?
  bedroom String?
  type    String?
  roomId  Int?     @unique
  room    Room?    @relation(fields: [roomId], references: [id])
}

model RoomStatus {
  id            Int            @id @default(autoincrement())
  status        String?
  code          String?
  note          String?
  statusOfRooms StatusOfRoom[]
}

model StatusOfRoom {
  id           Int         @id @default(autoincrement())
  roomStatusId Int?
  roomStatus   RoomStatus? @relation(fields: [roomStatusId], references: [id])
  roomId       Int?
  room         Room?       @relation(fields: [roomId], references: [id])
  roleId       Int?
  role         Role?       @relation(fields: [roleId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

}

model Sessions {
  sid       String    @id
  expire    DateTime
  sess      Json
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Service{
  id Int @id @unique @default(autoincrement())
  name String
  type String
  price Int 
  image String 
}

model Event{
  id Int @id @unique @default(autoincrement())
  name String
  start DateTime
  end DateTime
  detail String
  createdBy Int
  user      User    @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}